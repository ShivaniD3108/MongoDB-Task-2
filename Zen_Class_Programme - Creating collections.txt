Mongodb Task - Zen_Class_Programme
Creating collections for the database Zen_Class_Programme and adding validations for collections


Collection - users
db.createCollection("users",{
   validator:{
	$jsonSchema:{
     bsonType:"object",
     required:["user_id","name","email","role"],
     properties: {
       user_id:{
          bsonType:"objectId",
             description:"Objectid must be a unique and is mandatory."
         },
        name:{
             bsonType:"string",
                 description:"Name cannot be left blank."
         },
        email:{
             bsonType:"string",
             pattern:"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9._%+-]+\\.[a-zA-Z]{2,}$",
                 description:"Email address must be a unique and is required."
         },
        role:{
             bsonType:"string",
             enum:["Student", "Mentor"],
                 description:"Role should be student or mentor and cannot be left blank."
         }
           }
         }
      },
        validationAction:"error"
 })

Collection - codekata

db.createCollection("codekata", {
    validator: {
       $jsonSchema: {
          bsonType: "object",
          required: ["kata_id", "user_id", "problem_solved_date", "problem_count"],
          properties: {
             kata_id: {
                bsonType: "string",
                description: "must be a string and is required"
             },
             user_id: {
                bsonType: "objectId",
                description: "must be an objectId and is required"
             },
             problem_solved_date: {
                bsonType: "date",
                description: "must be a date and is required"
             },
             problem_count: {
                bsonType: "int",
                minimum: 0,
                description: "must be a non-negative integer and is required"
             }
          }
       }
    },
    validationAction: "error"
 })

Collection - attendance

db.createCollection("attendance", {
   validator: {
      $jsonSchema: {
         bsonType: "object",
         required: ["attendance_id", "user_id", "date", "status"],
         properties: {
            attendance_id: {
               bsonType: "objectId",
               description: "must be a unique objectId and is required"
            },
            user_id: {
               bsonType: "objectId",
               description: "must be a valid objectId referencing the users collection and is required"
            },
            date: {
               bsonType: "date",
               description: "must be a date and is required"
            },
            status: {
               bsonType: "string",
               enum: ["present", "absent"],
               description: "must be either 'present' or 'absent' and is required"
            }
         }
      }
   },
   validationAction: "error"
})

Collection - topics

db.createCollection("topics", {
   validator: {
      $jsonSchema: {
         bsonType: "object",
         required: ["topic_id", "topic_name"],
         properties: {
            topic_id: {
               bsonType: "objectId",
               description: "must be a unique objectId and is required"
            },
            topic_name: {
               bsonType: "string",
               description: "must be a string and is required"
            }
         }
      }
   },
   validationAction: "error"
})

Collection - tasks

db.createCollection("tasks", {
   validator: {
      $jsonSchema: {
         bsonType: "object",
         required: ["task_id", "user_id", "topic_id", "date", "task_status"],
         properties: {
            task_id: {
               bsonType: "objectId",
               description: "must be a unique objectId and is required"
            },
            user_id: {
               bsonType: "objectId",
               description: "must be a valid objectId referencing the users collection and is required"
            },
            topic_id: {
               bsonType: "objectId",
               description: "must be a valid objectId referencing the topics collection and is required"
            },
	    task_name: {
               bsonType: "string",
               description: "must be a string and is required"
            },
            date: {
               bsonType: "date",
               description: "must be a date and is required"
            },
            task_status: {
               bsonType: "string",
               enum: ["submitted", "pending"],
               description: "must be either 'submitted' or 'pending' and is required"
            }
         }
      }
   },
   validationAction: "error"
})

Collection - company_drives

db.createCollection("company_drives", {
   validator: {
      $jsonSchema: {
         bsonType: "object",
         required: ["drive_id", "drive_name", "drive_date"],
         properties: {
            drive_id: {
               bsonType: "objectId",
               description: "must be a unique objectId and is required"
            },
            drive_name: {
               bsonType: "string",
               description: "must be a string and is required"
            },
            drive_date: {
               bsonType: "date",
               description: "must be a date and is required"
            }
         }
      }
   },
   validationAction: "error"
})

Collection - mentors

db.createCollection("mentors", {
   validator: {
      $jsonSchema: {
         bsonType: "object",
         required: ["mentor_id", "name", "mentee_count"],
         properties: {
            mentor_id: {
               bsonType: "objectId",
               description: "must be a unique objectId and is required"
            },
            name: {
               bsonType: "string",
               description: "must be a string and is required"
            },
            mentee_count: {
               bsonType: "int",
               minimum: 0,
               description: "must be a non-negative integer and is required"
            }
         }
      }
   },
   validationAction: "error"
})
